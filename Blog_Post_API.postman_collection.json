{
	"info": {
		"_postman_id": "24b9b1a0-8dc2-484c-9ce3-4ede6f31b0d1",
		"name": "Blog_Post_API",
		"description": "A simple CRUD Blog API with user interactivity, built with Laravel 10",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37584024"
	},
	"item": [
		{
			"name": "blog",
			"item": [
				{
					"name": "create_blog",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.title).to.exist;\r",
									"    pm.expect(responseData.description).to.exist;\r",
									"    pm.expect(responseData.updated_at).to.exist;\r",
									"    pm.expect(responseData.created_at).to.exist;\r",
									"    pm.expect(responseData.id).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Title, description, updated_at, and created_at are non-empty strings\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
									"    pm.expect(responseData.description).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
									"    pm.expect(responseData.updated_at).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
									"    pm.expect(responseData.created_at).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Id is a non-negative integer\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.id).to.be.a('number');\r",
									"  pm.expect(responseData.id).to.be.at.least(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "vg@123",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "title",
									"value": "title name",
									"type": "text"
								},
								{
									"key": "description",
									"value": "description name",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "127.0.0.1:8000/api/blogs",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"blogs"
							]
						},
						"description": "### POST /api/blogs\n\nThis endpoint is used to create a new blog.\n\n#### Request Body\n\n- **title** (text): The title of the blog.\n    \n- **description** (text): The description of the blog.\n    \n- image_url (text): The image url of the blog.\n    \n\n#### Response\n\n- Status: 201\n    \n- Content-Type: application/json\n    \n\n##### Response Body\n\n``` json\n{\n    \"title\": \"\",\n    \"description\": \"\",\n    \"image_url\":\"\",\n    \"updated_at\": \"\",\n    \"created_at\": \"\",\n    \"id\": 0\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "show_blog",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "vg@123",
								"type": "text"
							}
						],
						"url": {
							"raw": "127.0.0.1:8000/api/blogs/32",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"blogs",
								"32"
							]
						},
						"description": "# Get Blog Details\n\nThis endpoint retrieves the details of a specific blog by providing the blog ID in the URL.\n\n## Request\n\n### Request URL\n\n- Method: GET\n    \n- URL: `127.0.0.1:8000/api/blogs/32`\n    \n\n## Response\n\n- Status: 200 OK\n    \n- Content-Type: application/json\n    \n\n``` json\n{\n    \"id\": 0,\n    \"title\": \"\",\n    \"description\": \"\",\n    \"image_url\": \"\",\n    \"created_at\": \"\",\n    \"updated_at\": \"\"\n}\n\n ```\n\nThe response body contains the details of the blog including its ID, title, description, image URL, creation timestamp, and last updated timestamp."
					},
					"response": []
				},
				{
					"name": "get_blog",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "vg@123",
								"type": "text"
							}
						],
						"url": {
							"raw": "127.0.0.1:8000/api/blogs",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"blogs"
							]
						},
						"description": "# Get Blog Details\n\nThis endpoint retrieves the details of a specific blog by providing the blog ID in the URL.\n\n## Request\n\n### Request URL\n\n- Method: GET\n    \n- URL: `127.0.0.1:8000/api/blogs`\n    \n\n## Response\n\n- Status: 200 OK\n    \n- Content-Type: application/json\n    \n\nThe response body contains an array of blog details, where each object includes the following parameters:\n\n- `id` (number): The unique identifier of the blog.\n    \n- `title` (string): The title of the blog.\n    \n- `description` (string): The description of the blog.\n    \n- `image_url` (string): The URL of the blog's image.\n    \n- `created_at` (string): The timestamp indicating when the blog was created.\n    \n- `updated_at` (string): The timestamp indicating when the blog was last updated."
					},
					"response": []
				},
				{
					"name": "update_blog",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "vg@123",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"update blog\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8000/api/blogs/32",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"blogs",
								"32"
							]
						},
						"description": "# Update Blog Title\n\nThis endpoint updates the title of a specific blog by providing the blog ID in the URL and the new title in the request body.\n\n## Request\n\n### Request URL\n\n- Method: PATCH\n    \n- URL: `127.0.0.1:8000/api/blogs/32`\n    \n\n### Request Body\n\n- Type: Raw\n    \n- { \"title\": \"update blog\"}\n    \n\n## Response\n\n- Status: 200 OK\n    \n- Content-Type: application/json\n    \n\n``` json\n{\n    \"id\": 0,\n    \"title\": \"\",\n    \"description\": \"\",\n    \"image_url\": \"\",\n    \"created_at\": \"\",\n    \"updated_at\": \"\"\n}\n\n ```\n\nThe response body contains the details of the blog including its ID, title, description, image URL, creation timestamp, and last updated timestamp."
					},
					"response": []
				},
				{
					"name": "delete_blog",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "vg@123",
								"type": "text"
							}
						],
						"url": {
							"raw": "127.0.0.1:8000/api/blogs/1",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"blogs",
								"1"
							]
						},
						"description": "### Request\n\nThis endpoint sends an HTTP DELETE request to delete the specific blog post with the ID 1.\n\n### Response\n\nUpon successful execution, the server responds with a status code of 204 and a content type of text/xml. The response body is null."
					},
					"response": []
				}
			]
		},
		{
			"name": "Post",
			"item": [
				{
					"name": "create_blog_posts",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "vg@123",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"title1\",\r\n    \"content\": \"description1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8000/api/blogs/12/posts",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"blogs",
								"12",
								"posts"
							]
						},
						"description": "### Add Blog Post\n\nThis endpoint allows you to add a new post to a specific blog.\n\n#### Request Body\n\n- `title`: (string) The title of the post.\n    \n- `content`: (string) The content of the post.\n    \n\nExample:\n\n``` json\n{\n    \"title\": \"title1\",\n    \"content\": \"description1\"\n}\n\n ```\n\n#### Response\n\nUpon successful creation, the server responds with a status code of 201 and the following JSON object:\n\n- `id`: (number) The unique identifier of the post.\n    \n- `blog_id`: (number) The identifier of the associated blog.\n    \n- `title`: (string) The title of the post.\n    \n- `content`: (string) The content of the post.\n    \n- `image_url`: (string) The URL of the post's image, if available.\n    \n- `created_at`: (string) The timestamp of when the post was created.\n    \n- `updated_at`: (string) The timestamp of when the post was last updated.\n    \n\nExample:\n\n``` json\n{\n    \"id\": 0,\n    \"blog_id\": 0,\n    \"title\": \"\",\n    \"content\": \"\",\n    \"image_url\": null,\n    \"created_at\": \"\",\n    \"updated_at\": \"\"\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "update_blog_posts",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "vg@123",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"title1\",\r\n    \"content\": \"description1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8000/api/posts/100",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"posts",
								"100"
							]
						},
						"description": "### Update Blog Post\n\nThis endpoint allows you to update an existing post in a specific blog.\n\n#### Request Body\n\n- `title`: (string) The updated title of the post.\n    \n- `content`: (string) The updated content of the post.\n    \n\nExample:\n\n``` json\n{\n    \"title\": \"updated_title\",\n    \"content\": \"updated_description\"\n}\n\n ```\n\n#### Response\n\nThe response is a JSON object with the following schema:\n\n``` json\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"number\",\n            \"description\": \"The unique identifier of the post.\"\n        },\n        \"blog_id\": {\n            \"type\": \"number\",\n            \"description\": \"The identifier of the associated blog.\"\n        },\n        \"title\": {\n            \"type\": \"string\",\n            \"description\": \"The title of the post.\"\n        },\n        \"content\": {\n            \"type\": \"string\",\n            \"description\": \"The content of the post.\"\n        },\n        \"image_url\": {\n            \"type\": \"string\",\n            \"description\": \"The URL of the post's image, if available.\"\n        },\n        \"created_at\": {\n            \"type\": \"string\",\n            \"description\": \"The timestamp of when the post was created.\"\n        },\n        \"updated_at\": {\n            \"type\": \"string\",\n            \"description\": \"The timestamp of when the post was last updated.\"\n        }\n    }\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "get_blog_posts",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "vg@123",
								"type": "text"
							}
						],
						"url": {
							"raw": "127.0.0.1:8000/api/blogs/12/posts",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"blogs",
								"12",
								"posts"
							]
						},
						"description": "This endpoint makes an HTTP GET request to retrieve posts belonging to the blog with ID 12. The request does not include a request body.\n\n### Response\n\nUpon a successful execution, the server responds with a status code of 200 and a JSON array containing the posts. Each post object in the array includes the following fields:\n\n- `id`: The unique identifier for the post.\n    \n- `blog_id`: The ID of the blog to which the post belongs.\n    \n- `title`: The title of the post.\n    \n- `content`: The content of the post.\n    \n- `image_url`: The URL of the image associated with the post.\n    \n- `created_at`: The timestamp indicating the creation time of the post.\n    \n- `updated_at`: The timestamp indicating the last update time of the post."
					},
					"response": []
				},
				{
					"name": "show_blog_posts",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "vg@123",
								"type": "text"
							}
						],
						"url": {
							"raw": "127.0.0.1:8000/api/posts/200",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"posts",
								"200"
							]
						},
						"description": "### Request\n\nThis endpoint makes an HTTP GET request to retrieve a specific post with the ID 200.\n\n### Response\n\nUpon a successful execution, the server responds with a status code of 200 and a JSON object containing the post details. The post object includes the following fields:\n\n- `id`: The unique identifier for the post.\n    \n- `blog_id`: The ID of the blog to which the post belongs.\n    \n- `title`: The title of the post.\n    \n- `content`: The content of the post.\n    \n- `image_url`: The URL of the image associated with the post.\n    \n- `created_at`: The timestamp indicating the creation time of the post.\n    \n- `updated_at`: The timestamp indicating the last update time of the post."
					},
					"response": []
				},
				{
					"name": "delete_blog_posts",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "vg@123",
								"type": "text"
							}
						],
						"url": {
							"raw": "127.0.0.1:8000/api/posts/201",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"posts",
								"201"
							]
						},
						"description": "### Request\n\nThis endpoint makes an HTTP DELETE request to delete the specific post with the ID 201.\n\n### Response\n\nUpon a successful execution, the server responds with a status code of 204 and a content type of text/xml. The response body is null."
					},
					"response": []
				}
			]
		},
		{
			"name": "Comment",
			"item": [
				{
					"name": "create_post_comments",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "vg@123",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"title1\",\r\n    \"content\": \"description1\",\r\n    \"user_id\": 10\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8000/api/posts/40/comments",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"posts",
								"40",
								"comments"
							]
						},
						"description": "### Add Post Comment\n\nThis endpoint allows you to add a new comment to a specific blog post.\n\n#### Request Body\n\n- `title`: (string) The title of the comment.\n    \n- `content`: (string) The content of the comment.\n    \n- `user_id`: (number) The identifier of the user adding the comment.\n    \n\nExample:\n\n``` json\n{\n    \"title\": \"title1\",\n    \"content\": \"description1\",\n    \"user_id\": 10\n}\n\n ```\n\n#### Response\n\nThe response is a JSON object with the following schema:\n\n``` json\n{\n    \"user_id\": 0,\n    \"content\": \"\",\n    \"post_id\": 0,\n    \"updated_at\": \"\",\n    \"created_at\": \"\",\n    \"id\": 0\n}\n\n ```\n\n- `user_id`: (number) The identifier of the user who added the comment.\n    \n- `content`: (string) The content of the comment.\n    \n- `post_id`: (number) The identifier of the associated post.\n    \n- `created_at`: (string) The timestamp of when the comment was created.\n    \n- `updated_at`: (string) The timestamp of when the comment was last updated.\n    \n- `id`: (number) The unique identifier of the comment."
					},
					"response": []
				},
				{
					"name": "update_post_comment",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "vg@123",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"title1\",\r\n    \"content\": \"description1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8000/api/posts/40/comments/402",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"posts",
								"40",
								"comments",
								"402"
							]
						},
						"description": "### Update Blog Post\n\nThis endpoint is used to update an existing comment on a specific blog post.\n\n#### Request Body\n\n- `title`: (string) The updated title of the comment.\n    \n- `content`: (string) The updated content of the comment.\n    \n\nExample:\n\n``` json\n{\n    \"title\": \"updated_title\",\n    \"content\": \"updated_description\"\n}\n\n ```\n\n#### Response\n\nThe response is a JSON object with the following schema:\n\n``` json\n{\n    \"id\": {\n        \"type\": \"number\",\n        \"description\": \"The unique identifier of the comment.\"\n    },\n    \"post_id\": {\n        \"type\": \"number\",\n        \"description\": \"The identifier of the associated blog post.\"\n    },\n    \"user_id\": {\n        \"type\": \"number\",\n        \"description\": \"The identifier of the user who made the comment.\"\n    },\n    \"content\": {\n        \"type\": \"string\",\n        \"description\": \"The content of the comment.\"\n    },\n    \"created_at\": {\n        \"type\": \"string\",\n        \"description\": \"The timestamp of when the comment was created.\"\n    },\n    \"updated_at\": {\n        \"type\": \"string\",\n        \"description\": \"The timestamp of when the comment was last updated.\"\n    }\n}\n\n ```"
					},
					"response": []
				}
			]
		},
		{
			"name": "Like",
			"item": [
				{
					"name": "create_post_likes",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "vg@123",
								"type": "text"
							}
						],
						"url": {
							"raw": "127.0.0.1:8000/api/posts/40/likes",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"posts",
								"40",
								"likes"
							]
						},
						"description": "### Add Post Like\n\nThis endpoint allows you to add a new like to a specific blog post.\n\nThe response is a JSON object with the following schema:\n\n``` json\n{\n    \"user_id\": (number) The identifier of the user who added the comment.\n    \"post_id\": (number) The identifier of the associated post.\n    \"created_at\": (string) The timestamp of when the comment was created.\n    \"updated_at\": (string) The timestamp of when the comment was last updated.\n    \"id\": (number) The unique identifier of the comment.\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "update_post_comment",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "vg@123",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"title1\",\r\n    \"content\": \"description1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8000/api/posts/40/comments/402",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"posts",
								"40",
								"comments",
								"402"
							]
						},
						"description": "### Update Blog Post\n\nThis endpoint is used to update an existing comment on a specific blog post.\n\n#### Request Body\n\n- `title`: (string) The updated title of the comment.\n    \n- `content`: (string) The updated content of the comment.\n    \n\nExample:\n\n``` json\n{\n    \"title\": \"updated_title\",\n    \"content\": \"updated_description\"\n}\n\n ```\n\n#### Response\n\nThe response is a JSON object with the following schema:\n\n``` json\n{\n    \"id\": {\n        \"type\": \"number\",\n        \"description\": \"The unique identifier of the comment.\"\n    },\n    \"post_id\": {\n        \"type\": \"number\",\n        \"description\": \"The identifier of the associated blog post.\"\n    },\n    \"user_id\": {\n        \"type\": \"number\",\n        \"description\": \"The identifier of the user who made the comment.\"\n    },\n    \"content\": {\n        \"type\": \"string\",\n        \"description\": \"The content of the comment.\"\n    },\n    \"created_at\": {\n        \"type\": \"string\",\n        \"description\": \"The timestamp of when the comment was created.\"\n    },\n    \"updated_at\": {\n        \"type\": \"string\",\n        \"description\": \"The timestamp of when the comment was last updated.\"\n    }\n}\n\n ```"
					},
					"response": []
				}
			]
		}
	]
}